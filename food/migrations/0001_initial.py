# Generated by Django 4.0 on 2022-12-01 17:04

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last')),
                ('date_joined', models.DateTimeField(auto_now_add=True, verbose_name='date')),
                ('is_active', models.BooleanField(default=True, verbose_name='active')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars/')),
                ('pplink', models.CharField(max_length=500, verbose_name='pplink')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
        ),
        migrations.CreateModel(
            name='Drink',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=30, verbose_name='name')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='price')),
                ('is_available', models.BooleanField(default=False, verbose_name='is_available')),
                ('volume', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='volume')),
            ],
        ),
        migrations.CreateModel(
            name='Food',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=30, verbose_name='name')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='price')),
                ('size', models.CharField(max_length=50, verbose_name='size')),
                ('notes', models.CharField(max_length=500, verbose_name='notes')),
                ('is_available', models.BooleanField(default=False, verbose_name='is_available')),
                ('duration', models.IntegerField(default=0, verbose_name='duration')),
                ('category', models.CharField(choices=[('Main Dishes', 'Main Dishes'), ('Wraps', 'Wraps'), ('Pastas', 'Pastas'), ('Meat', 'Meat'), ('Vegetarian', 'Vegetarian'), ('Salads', 'Salads')], max_length=50, verbose_name='category')),
            ],
        ),
        migrations.CreateModel(
            name='Store',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=30, verbose_name='name')),
                ('location', models.CharField(blank=True, max_length=300, verbose_name='location')),
                ('is_available', models.BooleanField(default=False, verbose_name='is_available')),
                ('volume', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='volume')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='food.user', verbose_name='owner')),
            ],
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=30, verbose_name='name')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='price')),
                ('estimated_duration', models.IntegerField(default=0, verbose_name='duration')),
                ('created_at', models.DateTimeField(auto_now=True, verbose_name='created_at')),
                ('status', models.CharField(choices=[('Completed', 'Completed'), ('Preparing', 'Preparing'), ('Cancelled', 'Cancelled')], max_length=50, verbose_name='status')),
                ('drink', models.ManyToManyField(related_name='order_drinks', to='food.Drink', verbose_name='drink')),
                ('food', models.ManyToManyField(related_name='order_foods', to='food.Food', verbose_name='food')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='food.user', verbose_name='owner')),
                ('store', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='food.store', verbose_name='store')),
            ],
        ),
        migrations.AddField(
            model_name='food',
            name='store',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='food.store', verbose_name='store'),
        ),
        migrations.AddField(
            model_name='drink',
            name='store',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='food.store', verbose_name='store'),
        ),
    ]
